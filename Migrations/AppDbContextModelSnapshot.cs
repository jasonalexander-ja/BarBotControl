// <auto-generated />
using BarBotControl.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BarBotControl.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BarBotControl.Models.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ModuleId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("BarBotControl.Models.Option", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("OptionId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("BarBotControl.Models.Sequence", b =>
                {
                    b.Property<int>("SequenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SequenceId");

                    b.ToTable("Sequences");
                });

            modelBuilder.Entity("BarBotControl.Models.SequenceItem", b =>
                {
                    b.Property<int>("SequenceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<int>("SequenceId")
                        .HasColumnType("int");

                    b.HasKey("SequenceItemId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("OptionId");

                    b.HasIndex("SequenceId");

                    b.ToTable("SequenceItem");
                });

            modelBuilder.Entity("BarBotControl.Models.Option", b =>
                {
                    b.HasOne("BarBotControl.Models.Module", "Module")
                        .WithMany("Options")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("BarBotControl.Models.SequenceItem", b =>
                {
                    b.HasOne("BarBotControl.Models.Module", "Module")
                        .WithMany("SequenceItems")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarBotControl.Models.Option", "Option")
                        .WithMany("SequenceItems")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarBotControl.Models.Sequence", "Sequence")
                        .WithMany("SequenceItems")
                        .HasForeignKey("SequenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Option");

                    b.Navigation("Sequence");
                });

            modelBuilder.Entity("BarBotControl.Models.Module", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("SequenceItems");
                });

            modelBuilder.Entity("BarBotControl.Models.Option", b =>
                {
                    b.Navigation("SequenceItems");
                });

            modelBuilder.Entity("BarBotControl.Models.Sequence", b =>
                {
                    b.Navigation("SequenceItems");
                });
#pragma warning restore 612, 618
        }
    }
}
