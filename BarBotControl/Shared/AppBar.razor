@using BarBotControl.Config

@inject SessionService _sessionService
@inject ILocalStorageService _localStorage
@inject IJSRuntime JS


<MudAppBar Color="Color.Primary" Elevation="0">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
    <MudSpacer />
    <SudoView>
        <Authed>
            <MudText Typo="Typo.subtitle1">@UserName</MudText>
            <MudIconButton 
                Icon="@Icons.Material.Filled.Logout"
                aria-label="Dark Mode"
                OnClick="@LogOut"
                Color="Color.Secondary"
            >
            </MudIconButton>
        </Authed>
    </SudoView>
    <MudIconButton 
        Icon=@(StateProvider.DarkMode 
                ? Icons.Material.Filled.LightMode 
                : Icons.Material.Outlined.LightMode)
        aria-label="Light Mode" 
        OnClick="@ToggleDarkMode"
        Color="Color.Secondary"
    >
    </MudIconButton>
</MudAppBar>

@code {
    [CascadingParameter]
    public StateProvider StateProvider { get; set; } = new StateProvider();

    [Parameter]
    public Action DrawerToggle { get; set; } = () => { };
    [Parameter]
    public Func<Task> ToggleDarkMode { get; set; } = () => Task.CompletedTask;

    public string UserName { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        UserName = await _localStorage.GetItemAsStringAsync(SessionKeys.SessionUserNameKey) ?? "";
    }

    public async Task LogOut()
    {
        string token = await _localStorage.GetItemAsStringAsync(SessionKeys.SessionTokenKey) ?? "";
        var isAuthed = _sessionService.CheckSession(token);

        if (!isAuthed)
        {
            await JS.InvokeVoidAsync("reload");
            return;
        }

        _sessionService.RemoveSession(token);
        await _localStorage.SetItemAsStringAsync(SessionKeys.SessionTokenKey, "");
        await _localStorage.SetItemAsStringAsync(SessionKeys.SessionUserNameKey, "");
        await JS.InvokeVoidAsync("reload");
    }

}
