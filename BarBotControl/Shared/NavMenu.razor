@using BarBotControl.Config

@inject SessionService _sessionService
@inject ILocalStorageService _localStorage


@if (IsAuthed)
{
    <MudNavMenu>
        <MudNavGroup Title="Sequences" Expanded="true" Icon="@Icons.Material.Filled.Menu">
            <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.FormatListNumbered">
                Sequences
            </MudNavLink>
            <MudNavLink Href="InactiveSequences" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.FolderOff">
                Inactive Sequences
            </MudNavLink>
            <MudNavLink Href="SequenceNew" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Add">
                New Sequence
            </MudNavLink>
        </MudNavGroup>
        <MudNavLink Href="Users" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.SupervisedUserCircle">
            Users
        </MudNavLink>
        <MudNavLink Href="Modules" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.AccountTree">
            Modules
        </MudNavLink>
    </MudNavMenu>
}
else 
{
    <MudNavMenu>
        <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.FormatListNumbered">
            Sequences
        </MudNavLink>
        <MudNavLink Href="SudoIn" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Login">
            Sudo In
        </MudNavLink>
    </MudNavMenu>
}

@code {
    public bool IsAuthed { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        string token = await _localStorage.GetItemAsStringAsync(SessionKeys.SessionTokenKey) ?? "";

        IsAuthed = _sessionService.CheckSession(token);
        StateHasChanged();
        await base.OnAfterRenderAsync(firstRender);
    }
}
