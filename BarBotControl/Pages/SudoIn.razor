@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using BarBotControl.Exceptions.SudoUser
@using BarBotControl.Config
@using BarBotControl.Models

@page "/SudoIn"
@inject ILocalStorageService LocalStorage
@inject SudoUserService SudoUserService
@inject SessionService SessionService
@inject ISnackbar Snackbar
@inject IJSRuntime JS


<PageTitle>Sudo In</PageTitle>

@if (!IsStartup)
{
    <MudGrid Class="pb-2" Spacing="0" Justify="Justify.Center">
        <MudItem xs="12" sm="7" Class="d-flex align-end px-1">
            <MudText Class="pt-2" Typo="Typo.h6">User Login</MudText>
        </MudItem>
    </MudGrid>

    <MudForm @ref="UserNameForm">
        <EditForm Model="@UsernamePassword" OnValidSubmit="OnValidSubmitLogin">
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12" sm="7">
                    <MudCard>
                        <MudCardContent>
                            <MudGrid Spacing="1">
                                <MudItem xs="12">
                                    <MudTextField 
                                        T="string" 
                                        Label="Username"
                                        Variant="Variant.Filled"
                                        @bind-Value="UsernamePassword.UserName" 
                                        For=@(() => UsernamePassword.UserName)
                                    />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField 
                                        T="string" 
                                        Label="Password" 
                                        InputType="InputType.Password"
                                        Variant="Variant.Filled"
                                        @bind-Value="UsernamePassword.Password" 
                                        For=@(() => UsernamePassword.Password)
                                    />
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
            <MudGrid Justify="Justify.Center" Class="pt-2">
                <MudItem xs="12" sm="7">
                    <MudGrid Justify="Justify.FlexStart" Spacing="1">
                        <MudItem md="4" sm="6" xs="12">
                            <MudButton 
                                Variant="Variant.Filled" 
                                aria-label="Save edit"
                                Color="Color.Primary"
                                ButtonType="ButtonType.Submit"
                                DisableElevation="true" 
                                FullWidth="true"
                            >
                                Login
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudForm>
}
else 
{
    <MudGrid Class="pb-2" Spacing="0" Justify="Justify.Center">
        <MudItem xs="12" sm="7" Class="d-flex align-end">
            <MudText Class="pt-2" Typo="Typo.h6">Start Up Login</MudText>
        </MudItem>
    </MudGrid>

    <MudForm @ref="StartupForm">
        <EditForm Model="@StartupPasscode" OnValidSubmit="OnValidSubmitStartupLogin">
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12" sm="7">
                    <MudCard>
                        <MudCardContent>
                            <MudGrid Spacing="1">
                                <MudItem xs="12">
                                    <MudTextField 
                                        T="string" 
                                        Label="Startup Passcode" 
                                        InputType="InputType.Password"
                                        @bind-Value="StartupPasscode.Passcode" 
                                        For=@(() => StartupPasscode.Passcode)
                                    />
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
            <MudGrid Justify="Justify.Center" Class="pt-2">
                <MudItem xs="12" sm="7">
                    <MudGrid Justify="Justify.FlexStart" Spacing="1">
                        <MudItem md="4" sm="6" xs="12">
                            <MudButton 
                                Variant="Variant.Filled" 
                                aria-label="Save edit"
                                Color="Color.Primary"
                                ButtonType="ButtonType.Submit"
                                DisableElevation="true" 
                                FullWidth="true"
                            >
                                Login
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudForm>
}

@code {
    public MudForm UserNameForm { get; set; }
    public MudForm StartupForm { get; set; }

    public UsernamePassword UsernamePassword { get; set; } = new UsernamePassword();
    public PassCodeModel StartupPasscode { get; set; } = new PassCodeModel();

    public bool IsStartup { get; set; }

    public async Task TryLogin(Func<Task<SudoSession>> loginCurriedFunc)
    {
        try
        {
            var session = await loginCurriedFunc.Invoke();
            await LocalStorage.SetItemAsStringAsync(SessionKeys.SessionTokenKey, session.SessionKey);
            await LocalStorage.SetItemAsStringAsync(SessionKeys.SessionUserNameKey, session.UserName);
            await JS.InvokeVoidAsync("reload");
        }
        catch (SignInBaseException ex)
        {
            Snackbar.Add(ex.Message, Severity.Warning);
        }
        catch (AppHasUsersException)
        {
            Snackbar.Add("Users have already been added to this app and startup login is not available. ", Severity.Warning);
            StateHasChanged();
        }
        catch (Exception)
        {
            Snackbar.Add("Something went really wrong there, go yell at Jason. ", Severity.Error);
        }
    }

    private async Task OnValidSubmitLogin(EditContext context)
    {
        await UserNameForm.Validate();
        if (!UserNameForm.IsValid)
        {
            Snackbar.Add("Ensure username and password is entered. ", Severity.Warning);
            return;
        }
        await TryLogin(async () => await SudoUserService.SignUserIn(UsernamePassword.UserName, UsernamePassword.Password));
    }

    private async Task OnValidSubmitStartupLogin(EditContext context)
    {
        await StartupForm.Validate();
        if (!StartupForm.IsValid)
        {
            Snackbar.Add("Please enter a startup passcode. ", Severity.Warning);
            return;
        }
        await TryLogin(async () => await SudoUserService.StartupSignIn(StartupPasscode.Passcode));
    }

    protected override async Task OnInitializedAsync()
    {
        IsStartup = await SudoUserService.CanStartupSignIn();

        await base.OnInitializedAsync();
    }
}
