@inherits AuthedPageBase
@page "/Module/{ModuleIdStr}"

@inject ModuleService _moduleService
@inject OptionService _optionService
@inject ErrorTypeService _errorTypeService
@inject ISnackbar _snackbar
@inject NavigationManager _navigation

<PageTitle>Edit Module</PageTitle>

<MudGrid Class="pb-2" Spacing="0" Justify="Justify.Center">
    <MudItem xs="12" sm="7">
        <MudText Typo="Typo.h6" Class="d-flex align-center px-1">
            <MudIconButton 
                Icon="@Icons.Material.Filled.ArrowBack"
                aria-label="Go Back"
                OnClick=@(() => _navigation.NavigateTo("/Modules"))
                Size="Size.Medium"
                Color="Color.Secondary"
            />
            Edit Module
        </MudText>
    </MudItem>
</MudGrid>

<MudForm @ref="Form">
    <EditForm Model="@Model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator/>
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="7">
                <MudCard>
                    <MudCardContent>
                        <MudGrid Spacing="1">
                            <MudItem md="6" xs="12">
                                @if (Loading)
                                {
                                    <MudSkeleton />
                                    <MudSkeleton />
                                }
                                else 
                                {
                                    <MudTextField 
                                        Label="Name"
                                        @bind-Value="Model.Name" 
                                        For="@(() => Model.Name)"
                                        Variant="Variant.Filled"
                                    />
                                }
                            </MudItem>
                            <MudItem md="6" xs="12">
                                @if (Loading)
                                {
                                    <MudSkeleton />
                                    <MudSkeleton />
                                }
                                else 
                                {
                                    <MudNumericField  
                                        Label="Channel"
                                        @bind-Value="Model.Channel" 
                                        For="@(() => Model.Channel)"
                                        Variant="Variant.Filled"
                                    />
                                }
                            </MudItem>
                            <MudItem md="6" xs="12" Class="d-flex align-center">
                                @if (Loading)
                                {
                                    <MudSkeleton />
                                    <MudSkeleton />
                                }
                                else
                                {
                                    <MudCheckBox 
                                        @bind-Value="Model.IsActive"
                                        Label="Is Active"
                                        Size="Size.Small"
                                        Color="Color.Secondary"
                                        For=@(() => Model.IsActive)
                                    />
                                }
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
        <MudGrid Justify="Justify.Center" Class="pt-2">
            <MudItem xs="12" sm="7">
                <MudGrid Justify="Justify.FlexStart" Spacing="1">
                    <MudItem md="4" sm="6" xs="12">
                        <MudButton 
                            Variant="Variant.Filled" 
                            aria-label="Save edit"
                            Color="Color.Primary"
                            ButtonType="ButtonType.Submit"
                            DisableElevation="true" 
                            FullWidth="true"
                        >
                            Save
                        </MudButton>
                    </MudItem>
                    <MudItem md="4" sm="6" xs="12">
                        <MudButton 
                            Variant="Variant.Filled" 
                            Color="Color.Secondary"
                            aria-label="Go Back"
                            OnClick=@(() => _navigation.NavigateTo("/Modules"))
                            DisableElevation="true" 
                            FullWidth="true"
                        >
                            Back 
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudForm>

<MudGrid Justify="Justify.Center" Class="py-2">
    <MudItem xs="12" sm="7">
        <MudDivider />
    </MudItem>
</MudGrid>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" sm="7">
        <MudTabs Elevation="2" Rounded="true" PanelClass="pa-0">
            <MudTabPanel Text="Options">
                <OptionsView
                    @bind-Options="Options"
                    @bind-Loading="Loading"
                    _optionService="_optionService"
                    ModuleId="Model.ModuleId"
                />
            </MudTabPanel>
            <MudTabPanel Text="Error Types">
                <ErrorTypesView
                    @bind-ErrorTypes="ErrTypes"
                    @bind-Loading="Loading"
                    ErrorTypeService="_errorTypeService"
                    ModuleId="Model.ModuleId"
                />
            </MudTabPanel>
        </MudTabs>
    </MudItem>
</MudGrid>



@code {
    MudForm Form;
    public ModuleModel Model { get; set; } = new ModuleModel();
    public IEnumerable<OptionModel> Options { get; set; } = new List<OptionModel>();
    public IEnumerable<ErrorTypeModel> ErrTypes { get; set; } = new List<ErrorTypeModel>();

    [Parameter]
    public string ModuleIdStr { get; set; } = string.Empty;
    public int ModuleId { get; set; }

    public bool Loading { get; set; } = true;

    protected override async Task GetData()
    {
        if (!int.TryParse(ModuleIdStr, out var modId))
        {
            _snackbar.Add("Incorrect formatted module Id. ", Severity.Warning);
            _navigation.NavigateTo($"/Modules");
            return;
        }
        ModuleId = modId;
        try
        {
            Model = await _moduleService.GetModule(ModuleId);
            Options = await _optionService.GetOptionsForModule(ModuleId);
            ErrTypes = await _errorTypeService.GetErrorTypesForModule(ModuleId);
        }
        catch (ObjectNotFoundException)
        {
            _snackbar.Add("That's weird, we can't find this module. ", Severity.Error);
            _navigation.NavigateTo("/Modules");
            return;
        }
        catch
        {
            _snackbar.Add("Something went wrong there, go yell at Jason. ", Severity.Error);
        }
        finally
        {
            Loading = false;
            StateHasChanged();
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await Form.Validate();
        if (!Form.IsValid)
        {
            _snackbar.Add("Ensure all fields are correctly filled out. ", Severity.Warning);
            return;
        }
        try
        {
            await _moduleService.UpdateModule(Model);
            _snackbar.Add("Successfully updated module. ", Severity.Success);
            _navigation.NavigateTo($"/Modules");
        }
        catch (ObjectNotFoundException)
        {
            _snackbar.Add("Strange, looks like this module has been deleted. ", Severity.Error);
            _navigation.NavigateTo($"/Modules");
        }
        catch
        {
            _snackbar.Add("Something went wrong there, go yell at Jason. ", Severity.Error);
        }
    }
}
