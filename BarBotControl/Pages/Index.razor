@using BarBotControl.Config

@page "/"

@inject SequenceService _sequenceService
@inject ISnackbar _snackbar
@inject NavigationManager _navigation
@inject ILocalStorageService _localStorage

<PageTitle>Sequences</PageTitle>


<MudGrid Class="pb-2" Justify="Justify.Center">
    <MudItem lg="8" xs="12">
        <MudGrid>
            <MudItem sm="6" xs="12" Class="d-flex align-end pb-0">
                <MudText Class="pt-2" Typo="Typo.h6">Bot Sequences</MudText>
            </MudItem>
            <MudItem sm="6" xs="12" Class="py-0">
                <MudTextField 
                    @bind-Value="SearchString" 
                    Placeholder="Search" 
                    Adornment="Adornment.Start" 
                    AdornmentIcon="@Icons.Material.Filled.Search" 
                    IconSize="Size.Medium" 
                    Class="mt-0"
                />
            </MudItem>
            @foreach (var seq in Sequences.Where(Filter))
            {
                <MudItem xl="3" lg="4" sm="6" xs="12">
                    <MudCard>
                        <MudCardContent>
                            <MudText>@seq.Name</MudText>
                            <MudText Typo="Typo.body2">@seq.Description</MudText>
                        </MudCardContent>
                        <MudCardActions Class="d-flex justify-end">
                            <MudIconButton
                                Icon="@Icons.Material.Filled.PlayArrow"
                                aria-label="Run"
                                OnClick=@(() => RunSequence(seq))
                                Color="Color.Primary"
                            />
                            <SudoView>
                                <Authed>
                                    <MudIconButton
                                        Icon="@Icons.Material.Filled.Edit"
                                        aria-label="Edit"
                                        OnClick=@(() => _navigation.NavigateTo($"/Sequence/{seq.SequenceId}"))
                                        Color="Color.Secondary"
                                    />
                                </Authed>
                            </SudoView>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
            @if (Loading)
            {
                <MudItem xs="12">
                    <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7"/>
                </MudItem>
            }
            else if (!Loading && !Sequences.Where(Filter).Any())
            {
                <MudItem xs="12" Class="d-flex justify-center">
                    <MudText Typo="Typo.subtitle1">Nothing to see here. </MudText>
                </MudItem>
            }
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    private string SearchString { get; set; }  = "";

    public bool Loading { get; set; } = true;

    public List<SequenceModel> Sequences { get; set; } = new ();

    private bool Filter(SequenceModel element) => FilterFunc(element, SearchString);

    private bool FilterFunc(SequenceModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    public async Task RunSequence(SequenceModel seq)
    {
        string idpToken = Guid.NewGuid().ToString();
        await _localStorage.SetItemAsStringAsync(SessionKeys.RequestIdempotencyKey, idpToken);
        _navigation.NavigateTo($"/Run/{seq.SequenceId}");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Sequences = await _sequenceService.GetActiveSequences();
            Loading = false;
            StateHasChanged();
        }
        catch
        {
            _snackbar.Add("Something went really wrong, go yell at Jason. ", Severity.Error);
        }
        
    }

}

