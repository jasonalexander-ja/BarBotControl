@inherits AuthedPageBase
@page "/Sequence/{SequenceId:int}"

@inject SequenceService _sequenceService
@inject SequenceItemService _sequenceItemService
@inject ISnackbar _snackbar
@inject NavigationManager _navigation
@inject IDialogService _dialogService

<PageTitle>Edit Sequence</PageTitle>

<MudGrid Class="pb-2" Spacing="0" Justify="Justify.Center">
    <MudItem xs="12" sm="7">
        <MudText Typo="Typo.h6" Class="d-flex align-center px-1">
            <MudIconButton 
                Icon="@Icons.Material.Filled.ArrowBack"
                aria-label="Go Back"
                OnClick=@(() => _navigation.NavigateTo("/"))
                Size="Size.Medium"
                Color="Color.Secondary"
            />
            Edit Sequence
        </MudText>
    </MudItem>
</MudGrid>

<MudForm @ref="Form">
    <EditForm Model="@Model" OnValidSubmit="OnValidSubmit">
        <MudGrid Class="pb-2" Justify="Justify.Center">
            <MudItem xs="12" sm="7">
                <MudCard>
                    <MudCardContent>
                        <MudGrid Spacing="1">
                            <MudItem xs="12">
                                @if (Loading)
                                {
                                    <MudSkeleton />
                                    <MudSkeleton />
                                }
                                else
                                {
                                    <MudTextField 
                                        T="string" 
                                        Label="Name" 
                                        Required="true"
                                        @bind-Value="Model.Name" 
                                        For=@(() => Model.Name)
                                        Variant="Variant.Filled"
                                    />
                                }
                            </MudItem>
                            <MudItem xs="12">
                                @if (Loading)
                                {
                                    <MudSkeleton />
                                    <MudSkeleton />
                                }
                                else
                                {
                                    <MudTextField 
                                        T="string" 
                                        Label="Description" 
                                        Required="true"
                                        Lines="3"
                                        @bind-Value="Model.Description" 
                                        For=@(() => Model.Description)
                                        Variant="Variant.Filled"
                                    />
                                }
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
        <MudGrid Class="pb-2" Justify="Justify.Center">
            <MudItem xs="12" sm="7">
                <MudGrid Justify="Justify.FlexStart" Spacing="1">
                    <MudItem md="4" sm="6" xs="12">
                        <MudButton 
                            Variant="Variant.Filled" 
                            aria-label="Save edit"
                            Color="Color.Primary"
                            ButtonType="ButtonType.Submit"
                            DisableElevation="true" 
                            FullWidth="true"
                        >
                            Save
                        </MudButton>
                    </MudItem>
                    <MudItem md="4" sm="6" xs="12">
                        <MudButton 
                            Variant="Variant.Filled" 
                            Color="Color.Secondary"
                            aria-label="Go Back"
                            OnClick=@(() => _navigation.NavigateTo("/"))
                            DisableElevation="true" 
                            FullWidth="true"
                        >
                            Back 
                        </MudButton>
                    </MudItem>
                    <MudItem md="4" sm="6" xs="12">
                        <MudButton 
                            Variant="Variant.Filled" 
                            Color="Color.Error"
                            aria-label="Go Back"
                            OnClick=@(() => Delete())
                            DisableElevation="true" 
                            FullWidth="true"
                        >
                            Delete Sequence
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudForm>
<MudGrid Class="pb-2" Justify="Justify.Center">
    <MudItem xs="12" sm="7">
        <MudDivider />
    </MudItem>
</MudGrid>

<MudGrid Class="pb-2" Justify="Justify.Center">
    <MudItem xs="12" sm="7">
        <SequenceItemView 
            @bind-SequenceItems="SequenceItemDescs"
            @bind-Loading="Loading"
            _sequenceItemService="_sequenceItemService"
            SequenceId="SequenceId"
        />
    </MudItem>
</MudGrid>


@code {
    MudForm Form;
    
    public SequenceModel Model { get; set; } = new SequenceModel();
    public List<SequenceItemDescModel> SequenceItemDescs { get; set; } = new List<SequenceItemDescModel>();

    [Parameter]
    public int SequenceId { get; set; }

    public bool Loading { get; set; } = true;

    private async Task OnValidSubmit(EditContext context)
    {
        await Form.Validate();
        if (!Form.IsValid)
        {
            _snackbar.Add("Ensure all fields are correctly filled out. ", Severity.Warning);
            return;
        }
        try
        {
            var newSequence = await _sequenceService.UpdateSequence(Model);
            _snackbar.Add("Sequence saved. ", Severity.Success);
            _navigation.NavigateTo($"/");
        }
        catch
        {
            _snackbar.Add("Something went wrong there, go yell at Jason. ", Severity.Error);
        }
    }

    public async Task Delete()
    {
        bool? result = await _dialogService.ShowMessageBox(
            "Warning", 
            "Deleting can not be undone!", 
            yesText:"Delete!", cancelText:"Cancel");
        if (!result.HasValue || !result.Value)
            return;
        try
        {
            await _sequenceService.DeleteSequence(Model);
            _snackbar.Add("Deleted sequence. ", Severity.Success);
            _navigation.NavigateTo("/");
        }
        catch 
        {
            _snackbar.Add("Something went wrong there, go yell at Jason. ", Severity.Error);
        }
    }

    protected override async Task GetData()
    {
        try
        {
            Model = await _sequenceService.GetSequenceWithItems(SequenceId);
            SequenceItemDescs = await _sequenceItemService.GetItemDescriptionsForSeq(SequenceId);
        }
        catch (ObjectNotFoundException)
        {
            _snackbar.Add("That's weird, we can't find this sequence. ", Severity.Error);
            _navigation.NavigateTo("/");
            return;
        }
        catch
        {
            _snackbar.Add("Something went wrong there, go yell at Jason. ", Severity.Error);
        }
        finally
        {
            Loading = false;
            StateHasChanged();
        }
    }
}
