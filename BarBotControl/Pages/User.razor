@using BarBotControl.Exceptions.SudoUser
@inherits AuthedPageBase
@page "/User/{UserName}"

@inject SudoUserService _userService
@inject ISnackbar _snackbar
@inject NavigationManager _navigation

<PageTitle>Edit User</PageTitle>

<MudGrid Class="pb-2" Spacing="0" Justify="Justify.Center">
    <MudItem xs="12" sm="7">
        <MudText Typo="Typo.h6" Class="d-flex align-center px-1">
            <MudIconButton 
                Icon="@Icons.Material.Filled.ArrowBack"
                aria-label="Go Back"
                           OnClick=@(() => _navigation.NavigateTo("/Users"))
                Size="Size.Medium"
                Color="Color.Secondary"
            />
            Edit User
        </MudText>
    </MudItem>
</MudGrid>

<MudForm @ref="Form">
    <EditForm Model="@Password" OnValidSubmit="OnValidSubmit">
        <MudGrid Class="pb-2" Justify="Justify.Center">
            <MudItem xs="12" sm="7">
                <MudCard>
                    <MudCardContent>
                        <MudGrid Spacing="1">
                            <MudItem md="6" xs="12">

                                @if (Loading)
                                {
                                    <MudSkeleton />
                                    <MudSkeleton />
                                }
                                else
                                {
                                    <MudTextField 
                                        T="string" 
                                        Label="User Name" 
                                        Required="true"
                                        Disabled="true"
                                        ReadOnly="true"
                                        @bind-Value="UserName"
                                        Variant="Variant.Filled"
                                    />
                                }
                            </MudItem>
                            <MudItem md="6" xs="12">


                                @if (Loading)
                                {
                                    <MudSkeleton />
                                    <MudSkeleton />
                                }
                                else
                                {
                                    <MudTextField 
                                        T="string" 
                                        Label="Password" 
                                        InputType="InputType.Password"
                                        Required="true"
                                        RequiredError="Password is required." 
                                        @bind-Value="Password"
                                        For=@(() => Password)
                                        Variant="Variant.Filled"
                                    />
                                }
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
        <MudGrid Class="pb-2" Justify="Justify.Center">
            <MudItem xs="12" sm="7">
                <MudGrid Justify="Justify.FlexStart" Spacing="1">
                    <MudItem md="4" sm="6" xs="12">
                        <MudButton 
                            Variant="Variant.Filled" 
                            aria-label="Save edit"
                            Color="Color.Primary"
                            ButtonType="ButtonType.Submit"
                            DisableElevation="true" 
                            FullWidth="true"
                        >
                            Save
                        </MudButton>
                    </MudItem>
                    <MudItem md="4" sm="6" xs="12">
                        <MudButton 
                            Variant="Variant.Filled" 
                            Color="Color.Secondary"
                            aria-label="Go Back"
                            OnClick=@(() => DeleteUser())
                            DisableElevation="true" 
                            FullWidth="true"
                        >
                            Delete
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudForm>


@code {
    MudForm Form { get; set; }

    public bool Loading { get; set; } = true;

    [Parameter]
    public string UserName { get; set; } = string.Empty;
    public string Password { get; set; } = string.Empty;

    public SudoUserModel SudoUser { get; set; } = new SudoUserModel();

    private async Task OnValidSubmit(EditContext context)
    {
        await Form.Validate();
        if (!Form.IsValid)
        {
            _snackbar.Add("Please specify a password. ", Severity.Warning);
            return;
        }
        try
        {
            await _userService.UpdatePassword(UserName, Password);
            _snackbar.Add("Updated password. ", Severity.Success);
            Password = "";
            StateHasChanged();
        }
        catch (SudoUserNotFoundException)
        {
            _snackbar.Add("That's weird, we can't find this user. ", Severity.Error);
            _navigation.NavigateTo("/Users");
        }
        catch
        {
            _snackbar.Add("Something went wrong there, go yell at Jason. ", Severity.Error);
        }
    }

    public async Task DeleteUser()
    {
        try
        {
            await _userService.DeleteUser(UserName);
            _snackbar.Add("Successfully deleted user. ", Severity.Success);
            _navigation.NavigateTo("Users");
        }
        catch (SudoUserNotFoundException)
        {
            _snackbar.Add("That's weird, we can't find this user. ", Severity.Error);
            _navigation.NavigateTo("Users");
        }
        catch
        {
            _snackbar.Add("Something went wrong there, go yell at Jason. ", Severity.Error);
        }
    }

    protected override async Task GetData()
    {
        try
        {
            SudoUser = await _userService.GetUser(UserName);
        }
        catch (SudoUserNotFoundException)
        {
            _snackbar.Add("No such user by that name. ", Severity.Warning);
            _navigation.NavigateTo("/Users");
            return;
        }
        catch
        {
            _snackbar.Add("Something went really wrong, go yell at Jason. ", Severity.Error);
        }
        finally
        {
            Loading = false;
            StateHasChanged();
        }
    }
}
