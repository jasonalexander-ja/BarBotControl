@using BarBotControl.Exceptions
@using BarBotControl.Config

@inherits AuthedPageBase
@page "/Modules"

@inject ModuleService ModuleService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Modules</PageTitle>

<MudGrid Class="pb-4" Spacing="0">
    <MudItem sm="6" xs="12" Class="d-flex align-end">
        <MudText Class="pt-2" Typo="Typo.h6">Modules</MudText>
    </MudItem>
    <MudItem sm="6" xs="12">
        <MudTextField 
            @bind-Value="SearchString" 
            Placeholder="Search" 
            Adornment="Adornment.Start" 
            AdornmentIcon="@Icons.Material.Filled.Search" 
            IconSize="Size.Medium" 
            Class="mt-0"
        />
    </MudItem>
</MudGrid>

<MudTable 
    Loading="Loading" 
    Items="@Elements" 
    Hover="true" 
    MultiSelection="true"
    SelectOnRowClick="false"
    Filter="new Func<ModuleModel, bool>(Filter)" 
    @bind-SelectedItems="SelectedItems"
>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Channel</MudTh>
        <MudTh>Active</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.ModuleId</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Channel">@context.Channel</MudTd>
        <MudTd DataLabel="Active">
            <MudSwitch 
                T="bool" 
                aria-label=@("Active Toggle: " + (context.IsActive ? "Active": "Inactive")) 
                Size="Size.Medium"
                Value="@context.IsActive"
                ValueChanged=@(() => ToggleActive(context))
                Color="Color.Secondary"
            />
        </MudTd>
        <MudTd DataLabel="Actions">
            <MudIconButton 
                Icon="@Icons.Material.Filled.Edit"
                aria-label="Edit"
                OnClick=@(() => Navigation.NavigateTo($"/Module/{context.ModuleId}"))
                               Size="Size.Medium"
                Color="Color.Primary"
            />
            <MudIconButton 
                Icon="@Icons.Material.Filled.Delete"
                aria-label="Delete"
                OnClick=@(() => DeleteModule(context))
                Size="Size.Medium"
                Color="Color.Secondary"
            />
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText Typo="Typo.subtitle1">Nothing to see here. </MudText>
    </NoRecordsContent>
    <PagerContent>
        @if (Elements.Count() > 10)
        {
            <MudTablePager />
        }
    </PagerContent>
</MudTable>

<MudGrid Class="py-4" Spacing="1">
    <MudItem lg="2" md="4" sm="6" xs="12">
        <MudButton 
            Variant="Variant.Filled" 
            Color="Color.Primary" 
            OnClick=@(() => Navigation.NavigateTo("/ModuleNew")) 
            DisableElevation="true" 
            FullWidth="true"
            aria-label="New module"
        >
            New Module
        </MudButton>
    </MudItem>

    @if (SelectedItems.Any())
    {
        <MudItem lg="2" md="4" sm="6" xs="12">
            <MudButton 
                Variant="Variant.Filled" 
                Color="Color.Secondary"
                OnClick="() => DeleteModules()"
                DisableElevation="true" 
                FullWidth="true"
                aria-label="Delete modules"
            >
                Delete Modules
            </MudButton>
        </MudItem>
    }
</MudGrid>




@code {
    public string SearchString { get; set; } = "";

    public HashSet<ModuleModel> SelectedItems = new HashSet<ModuleModel>();

    public bool Loading { get; set; } = true;

    public IEnumerable<ModuleModel> Elements = new List<ModuleModel>();

    public bool Filter(ModuleModel element) => FilterFunc(element, SearchString);

    public bool FilterFunc(ModuleModel element, string searchString)
    {
        string active = element.IsActive ? "Active" : "Inactive";
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.ModuleId.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Channel.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (active.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    public async Task ToggleActive(ModuleModel module)
    {
        module.IsActive = !module.IsActive;
        try
        {
            await ModuleService.UpdateModule(module);
            Snackbar.Add("Toggled module. ", Severity.Success);
            Elements = await ModuleService.GetModules();
            StateHasChanged();
        }
        catch (ObjectNotFoundException)
        {
            Snackbar.Add($"Hmmm, strange, couldn't find a module with the ID {module.ModuleId}", Severity.Error);
        }
        catch
        {
            Snackbar.Add("Something went really wrong, go yell at Jason. ", Severity.Error);
        }
    }

    public async Task DeleteModule(ModuleModel module)
    {
        try
        {
            await ModuleService.DeleteModule(module);
            Snackbar.Add("Deleted module. ", Severity.Success);
            Elements = await ModuleService.GetModules();
            StateHasChanged();
        }
        catch (ObjectNotFoundException)
        {
            Snackbar.Add($"Hmmm, strange, couldn't find a module with the ID {module.ModuleId}", Severity.Error);
        }
        catch
        {
            Snackbar.Add("Something went really wrong, go yell at Jason. ", Severity.Error);
        }
    }

    public async Task DeleteModules()
    {
        try
        {
            await ModuleService.DeleteModules(SelectedItems);
            Snackbar.Add("Deleted modules. ", Severity.Success);
            Elements = await ModuleService.GetModules();
            StateHasChanged();
        }
        catch (ObjectNotFoundException ex)
        {
            Snackbar.Add($"That was weird. {ex.Message}", Severity.Error);
        }
        catch
        {
            Snackbar.Add("Something went really wrong, go yell at Jason. ", Severity.Error);
        }
    }

    protected override async Task GetData()
    {
        try
        {
            Elements = await ModuleService.GetModules();
        }
        catch
        {
            Snackbar.Add("Something went reallt wrong, go yell at Jason. ", Severity.Error);
        }
        finally
        {
            Loading = false;
            StateHasChanged();
        }
    }
}
